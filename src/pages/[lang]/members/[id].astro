---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { languages } from "../../../i18n/ui";
import { getLangFromUrl, useTranslations } from "../../../i18n/utils";
import MemberPicture from "../../../components/MemberPicture.astro";
import SocialMedia from "../../../components/SocialMedia.astro";
import Article from "../../../components/publications/Article.astro";

export async function getStaticPaths() {
  const members = await getCollection("members");

  return Object.keys(languages).flatMap((lang) => {
    return members.flatMap((member) => {
      return { params: { lang, id: member.id }, props: member };
    });
  });
}

const member = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const publications = await getCollection("publications", ({ data }) => {
  return data.authorID.includes(member.id);
});
---

<BaseLayout title={t("nav.members")} section="members">
  <div class="flex gap-x-6">
    <div class="w-1/4">
      {
        member.data.img ? (
          <MemberPicture
            imagePath={member.data.img}
            alt={member.data.name}
            class="border-4 aspect-square object-cover"
          />
        ) : (
          <img src="/assets/default-brain.svg" alt="Default member image" />
        )
      }
    </div>

    <div class="w-3/4">
      <h1 class="text-3xl">{member.data.name} {member.data.lastName}</h1>
      <h2 class="">{member.data.role}</h2>

      {
        member.data.socialmedia && (
          <SocialMedia socialmedia={member.data.socialmedia} />
        )
      }

      <div class="mt-3">
        {member.data.info[lang]}
      </div>

      {
        publications.length > 0 && (
          <div class="mt-3">
            <h3>{t("publications")}</h3>
            {publications
              .sort((a, b) => {
                // Handle "Forthcoming" and similar strings (place them at the beginning)
                if (typeof a.data.year === "string") return -1;

                // Numeric comparison for normal years
                return b.data.year - a.data.year; // Descending (newest first)
              })
              .map((publication) => {
                return <Article {...publication.data} />;
              })}
          </div>
        )
      }
    </div>
  </div>
</BaseLayout>
