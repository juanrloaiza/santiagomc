---
import { getCollection } from "astro:content";
import { languages } from "../../../i18n/ui";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import {
    getLangFromUrl,
    parseDDMMYYYY,
    useCountryTranslations,
    useTranslations,
} from "../../../i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";

export async function getStaticPaths() {
    return Object.keys(languages).map((lang) => {
        return { params: { lang }, props: lang };
    });
}

const events = (await getCollection("events")).sort((a, b) => {
    const yearA = parseDDMMYYYY(a.data.startDate).getTime();
    const yearB = parseDDMMYYYY(b.data.startDate).getTime();

    return yearB - yearA;
});

const today = new Date();

const upcomingEvents = events.filter(
    (e) => parseDDMMYYYY(e.data.startDate) >= today,
);
const pastEvents = events.filter(
    (e) => parseDDMMYYYY(e.data.startDate) < today,
);

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translateCountry = useCountryTranslations(lang);
---

<BaseLayout title={t("nav.events")}>
    <h2 class="text-3xl mb-2">{t("upcoming events")}</h2>
    <div class="mb-8">
        {
            upcomingEvents.map((event) => {
                return (
                    <div class="mb-4">
                        <a
                            href={getRelativeLocaleUrl(
                                lang,
                                `events/${event.id}`,
                            )}
                        >
                            <span class="text-xs text-gray-600">
                                {t(event.data.eventType)}
                            </span>
                            <h3 class="text-xl -mt-[3pt]">
                                {event.data.title}
                            </h3>
                            {event.data.author}
                            {event.data.affiliation && event.data.country
                                ? `(${event.data.affiliation}, ${translateCountry(event.data.country) || event.data.country})`
                                : ""}
                            <div class="text-sm">
                                {event.data.startDate}{" "}
                                {event.data.endDate &&
                                    ` - ${event.data.endDate}`}
                            </div>
                        </a>
                    </div>
                );
            })
        }
    </div>

    <h2 class="text-3xl mb-2">{t("past events")}</h2>
    <div class="mb-6">
        {
            pastEvents.map((event) => {
                return (
                    <div class="mb-4">
                        <a
                            href={getRelativeLocaleUrl(
                                lang,
                                `events/${event.id}`,
                            )}
                        >
                            <span class="text-xs text-gray-600">
                                {t(event.data.eventType)}
                            </span>
                            <h3 class="text-xl -mt-[3pt] ">
                                {event.data.title}
                            </h3>
                            {event.data.author}
                            {event.data.affiliation && event.data.country
                                ? `(${event.data.affiliation}, ${translateCountry(event.data.country) || event.data.country})`
                                : ""}
                            <div class="text-sm">
                                {event.data.startDate}{" "}
                                {event.data.endDate &&
                                    ` - ${event.data.endDate}`}
                            </div>
                        </a>
                    </div>
                );
            })
        }
    </div>
</BaseLayout>
